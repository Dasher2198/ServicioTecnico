// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServicioTecnico.Data;

#nullable disable

namespace ServicioTecnico.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818010029_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServicioTecnico.Models.Certificado", b =>
                {
                    b.Property<int>("IdCertificado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCertificado"));

                    b.Property<string>("EstadoCertificado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("valido");

                    b.Property<DateTime>("FechaEmision")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInspeccion")
                        .HasColumnType("int");

                    b.Property<string>("NumeroCertificado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RutaArchivoDigital")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("IdCertificado");

                    b.HasIndex("IdInspeccion");

                    b.HasIndex("NumeroCertificado")
                        .IsUnique();

                    b.ToTable("Certificados", t =>
                        {
                            t.HasCheckConstraint("CK_Certificado_EstadoCertificado", "[EstadoCertificado] IN ('valido', 'vencido', 'anulado')");
                        });
                });

            modelBuilder.Entity("ServicioTecnico.Models.Cita", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCita"));

                    b.Property<string>("EstadoCita")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasDefaultValue("programada");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<TimeSpan>("HoraCita")
                        .HasColumnType("time");

                    b.Property<int>("IdEstacion")
                        .HasColumnType("int");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("IdCita");

                    b.HasIndex("IdEstacion");

                    b.HasIndex("IdVehiculo");

                    b.HasIndex("FechaCita", "HoraCita");

                    b.ToTable("Citas", t =>
                        {
                            t.HasCheckConstraint("CK_Cita_EstadoCita", "[EstadoCita] IN ('programada', 'completada', 'cancelada')");
                        });
                });

            modelBuilder.Entity("ServicioTecnico.Models.DetalleInspeccion", b =>
                {
                    b.Property<int>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetalle"));

                    b.Property<string>("CategoriaRevision")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdInspeccion")
                        .HasColumnType("int");

                    b.Property<string>("ObservacionesItem")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ResultadoItem")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdDetalle");

                    b.HasIndex("IdInspeccion");

                    b.ToTable("DetalleInspecciones", t =>
                        {
                            t.HasCheckConstraint("CK_DetalleInspeccion_ResultadoItem", "[ResultadoItem] IN ('OK', 'FALLO')");
                        });
                });

            modelBuilder.Entity("ServicioTecnico.Models.Estacion", b =>
                {
                    b.Property<int>("IdEstacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstacion"));

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Distrito")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("activa");

                    b.Property<string>("HorarioAtencion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreEstacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IdEstacion");

                    b.ToTable("Estaciones", t =>
                        {
                            t.HasCheckConstraint("CK_Estacion_Estado", "[Estado] IN ('activa', 'inactiva')");
                        });
                });

            modelBuilder.Entity("ServicioTecnico.Models.Inspeccion", b =>
                {
                    b.Property<int>("IdInspeccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInspeccion"));

                    b.Property<DateTime>("FechaInspeccion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCita")
                        .HasColumnType("int");

                    b.Property<int>("IdTecnico")
                        .HasColumnType("int");

                    b.Property<string>("NumeroCertificado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ObservacionesTecnicas")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdInspeccion");

                    b.HasIndex("FechaInspeccion");

                    b.HasIndex("IdCita");

                    b.HasIndex("IdTecnico");

                    b.ToTable("Inspecciones", t =>
                        {
                            t.HasCheckConstraint("CK_Inspeccion_Resultado", "[Resultado] IN ('aprobado', 'rechazado')");
                        });
                });

            modelBuilder.Entity("ServicioTecnico.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("activo");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios", t =>
                        {
                            t.HasCheckConstraint("CK_Usuario_Estado", "[Estado] IN ('activo', 'inactivo')");

                            t.HasCheckConstraint("CK_Usuario_TipoUsuario", "[TipoUsuario] IN ('cliente', 'tecnico')");
                        });
                });

            modelBuilder.Entity("ServicioTecnico.Models.Vehiculo", b =>
                {
                    b.Property<int>("IdVehiculo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVehiculo"));

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<string>("Cilindrada")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IdPropietario")
                        .HasColumnType("int");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroChasis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroPlaca")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TipoCombustible")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdVehiculo");

                    b.HasIndex("IdPropietario");

                    b.HasIndex("NumeroPlaca")
                        .IsUnique();

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Certificado", b =>
                {
                    b.HasOne("ServicioTecnico.Models.Inspeccion", "Inspeccion")
                        .WithMany("Certificados")
                        .HasForeignKey("IdInspeccion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inspeccion");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Cita", b =>
                {
                    b.HasOne("ServicioTecnico.Models.Estacion", "Estacion")
                        .WithMany("Citas")
                        .HasForeignKey("IdEstacion")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioTecnico.Models.Vehiculo", "Vehiculo")
                        .WithMany("Citas")
                        .HasForeignKey("IdVehiculo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estacion");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("ServicioTecnico.Models.DetalleInspeccion", b =>
                {
                    b.HasOne("ServicioTecnico.Models.Inspeccion", "Inspeccion")
                        .WithMany("Detalles")
                        .HasForeignKey("IdInspeccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspeccion");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Inspeccion", b =>
                {
                    b.HasOne("ServicioTecnico.Models.Cita", "Cita")
                        .WithMany("Inspecciones")
                        .HasForeignKey("IdCita")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServicioTecnico.Models.Usuario", "Tecnico")
                        .WithMany("InspeccionesTecnico")
                        .HasForeignKey("IdTecnico")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Tecnico");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Vehiculo", b =>
                {
                    b.HasOne("ServicioTecnico.Models.Usuario", "Propietario")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdPropietario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Propietario");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Cita", b =>
                {
                    b.Navigation("Inspecciones");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Estacion", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Inspeccion", b =>
                {
                    b.Navigation("Certificados");

                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Usuario", b =>
                {
                    b.Navigation("InspeccionesTecnico");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("ServicioTecnico.Models.Vehiculo", b =>
                {
                    b.Navigation("Citas");
                });
#pragma warning restore 612, 618
        }
    }
}
